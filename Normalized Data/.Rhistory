nv <- c(1,2,5.3,6,-2,4)
nv
mv <- c(1, 2, 3)
mv
c
help(c)
print(nv)
print('your mum')
print("you mum")
nv <- (1,2,3)
nv <- c(1, 2, 3)
lv <- (TRUE, TRUE)
nv
nv[1]
nv[(2,4)]
nv[c(2,4)]
y<-matrix(1:20, nrow=5,ncol=4)
y
cells <- c(1, 26, 24, 68)
cells
w <- list('a', 2)
w
w <- list(name="Fred", numb= 50)
w
w[[1]]
w[1]
x <- list("fred", 50)
x
x[1]
x[[1]]
x <- list("fred", num=50)
x
x[1]
x[[1]]
x[2]
d<- c(1,2,3,4)
e<-c('your', 'mum')
f <- data.frame(d, e)
f
f <- data.frame(d, e, x)
f
f
f[f$num==50, "num"] <- NA
f
f
f <- data.frame(d, e, x)
f
f[f$num==50] <- NA
f
is.na(f)
f
f[f$num==50, "num"] <- NA
f
f
f <- data.frame(d, e, x)
f[f$num==50, "num"] <- NA
f
is.na(f)
x
cells
f = data.frame(d, e, cells)
f
f[f$cells==68,"cells"] <- NA
f
f[f$cells==24,"cells"] <- 25
f
complete.cases(f)
na.omit(f)
x <- data.frame(1:20, nrows = 5, ncols = 4)
x
x <- data.frame(1:20,)
x <- matrix(1:20, nrow=2, ncol= 10)
x
x <- data.frame(1:20, nrow = 2, ncol = 10)
x
x[x$X1.20=5,"x1.20"] <- NA
x[x$nrow,"nrow"] <- NA
x
x[x$nrow=2,"nrow"] <- NA
x[x$nrow,"nrow"] <- NA
complete.cases(x)
complete.cases(x),
x[!complete.cases]
x[!complete.cases(x)]
x[!complete.cases(x),]
library(dplyr)
library(ggplot2)
library(caTools)
library(corrgram)
setwd("C:\\Users\\Yong Sheng\\Desktop\\UROP\\SplitVRPHUROP\\Normalized Data")
df <- read.csv("dataset_2.csv")
View(df)
View(df)
sampleSplit <- sample.split(Y=df$highest_split_distance_10x, SplitRatio=0.7)
trainSet <- subset(x=df, sampleSplit==TRUE)
testSet <- subset(x=df, sampleSplit==FALSE)
model <- lm(highest_split_distance_10x ~ *, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ *, data=trainSet)
library(dplyr)
model <- lm(highest_split_distance_10x ~ ., data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	sd_dist +	highest_demand +	lowest_demand+	mean_demand+	median_demand+	sd_demand+	original_objective, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective +mean_demand + 25th_demand + 75th_demand, data=trainSet)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective +mean_demand + '25th_demand' + '75th_demand', data=trainSet)
View(df)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective +mean_demand + X25th_demand + X75th_demand, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes +X10s_split_objective + rounded_split_objective, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes +X10x_split_objective + rounded_split_objective, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes + highest_dist + lowest_dist + mean_dist + median+dist + X25th_dist + X75th_dist, data=trainSet)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes + highest_dist + lowest_dist + mean_dist + median_dist + X25th_dist + X75th_dist, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
View(modelEval)
View(modelEval)
mean((modelEval.Actual - modelEval.Predicted))^2)
mean((modelEval.Actual - modelEval.Predicted)^2)
modelEval.Actual
modelEval
modelEval$Actual
mean((modelEval$Actual - modelEval$Predicted)^2)
mean(sqrt(modelEval$Actual - modelEval$Predicted)^2)
(modelEval$Actual - modelEval$Predicted)^2
mean((modelEval$Actual - modelEval$Predicted)^2)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x ~ 0 +highest_demand +	lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x ~ 0 +highest_demand +	lowest_demand +	original_objective, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x ~ 0 + highest_demand +	lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x ~ 0 + highest_demand +	lowest_demand +	original_objective, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
sampleSplit <- sample.split(Y=df$highest_split_distance_10x, SplitRatio=0.7)
trainSet <- subset(x=df, sampleSplit==TRUE)
testSet <- subset(x=df, sampleSplit==FALSE)
model <- lm(highest_split_distance_10x ~ highest_demand +	lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(highest_split_distance_10x~lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(0 + highest_split_distance_10x~lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
model <- lm(0 + highest_split_distance_10x~lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
model <- lm(highest_split_distance_10x~ 0+lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
preds <- predict(model, testSet)
modelEval <- cbind(testSet$highest_split_distance_10x, preds)
colnames(modelEval) <- c('Actual', 'Predicted')
modelEval <- as.data.frame(modelEval)
mean((modelEval$Actual - modelEval$Predicted)^2)^(1/2)
