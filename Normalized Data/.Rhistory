WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(north_week[11:13])
pred_next
North <- data.frame("North", WAPE, pred_next)
names(North) <- c("Zone","WAPE", "Prediction")
North
data_south <- subset(data, data$Zone == 'SOUTH' | data$Zone == 'SOUTH-WEST') #get data frame of only central zone
data_south
south_week <- as.matrix(table(data_south$Week.No.)) #get the number of DOs completed by week #
south_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
south_forecasts <- round(stats::filter(south_week[,1],weights,method="convolution",sides=1,circular=FALSE))
south_forecasts <- na.omit(south_forecasts)
class(south_forecasts)
forecasts <- as.numeric(south_forecasts)
forecasts
#plotting graph
actualsnew <- tail(south_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("South")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
dim(south_week) #no deliveries in Jul and Aug
pred_next <- 0
pred_next
South <- data.frame("South", WAPE, pred_next)
names(South) <- c("Zone","WAPE", "Prediction")
South
data_west <- subset(data, data$Zone == 'WEST') #get data frame of only central zone
data_west
west_week <- as.matrix(table(data_west$Week.No.)) #get the number of DOs completed by week #
west_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
west_forecasts <- round(stats::filter(west_week[,1],weights,method="convolution",sides=1,circular=FALSE))
west_forecasts <- na.omit(west_forecasts)
class(west_forecasts)
forecasts <- as.numeric(west_forecasts)
forecasts
#plotting graph
actualsnew <- tail(west_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("West")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(west_week[11:13])
pred_next
West <- data.frame("West", WAPE, pred_next)
names(West) <- c("Zone","WAPE", "Prediction")
West
library("dplyr")
combined <- bind_rows(Central,East, North, South, West)
combined
View(east_week)
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
data_east
east_week <- as.matrix(table(data_east$Week.No.)) #get the number of DOs completed by week #
east_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
east_forecasts <- round(stats::filter(east_week[,1],weights,method="convolution",sides=1,circular=FALSE))
east_forecasts <- na.omit(east_forecasts)
class(east_forecasts)
forecasts <- as.numeric(east_forecasts)
forecasts
#plotting graph
actualsnew <- tail(east_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("East")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(east_week[11:13])
pred_next
East <- data.frame("East", WAPE, pred_next)
names(East) <- c("Zone","WAPE", "Prediction")
East
#install.packages("ggplot2")
library("ggplot2")
rm(list=ls()) #remove all var in the list
data <- read.csv("Final_Combined.csv")
data <- subset(data,data$Week.No.!= 14)
str(data)
summary(data)
head(data)        #show top 6 rows
table(data$Zone)
ggplot(data,aes(x=Zone))+geom_bar()
data_central <- subset(data, data$Zone == 'CENTRAL') #get data frame of only central zone
data_central
central_week <- as.matrix(table(data_central$Week.No.)) #get the number of DOs completed by week #
central_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
central_forecasts <- round(stats::filter(central_week[,1],weights,method="convolution",sides=1,circular=FALSE)) #use stats:: because dpylr has a filter function that is different
central_forecasts <- na.omit(central_forecasts)
class(central_forecasts)
forecasts <- as.numeric(central_forecasts)
forecasts
#plotting graph
actualsnew <- tail(central_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("Central")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
dim(central_week)
central_week[11:13]
pred_next <- mean(central_week[11:13])
pred_next
#form into dataframe
Central <- data.frame("Central", WAPE, pred_next)
names(Central) <- c("Zone","WAPE", "Prediction")
Central
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
#install.packages("ggplot2")
library("ggplot2")
rm(list=ls()) #remove all var in the list
data <- read.csv("Final_Combined.csv")
data <- subset(data,data$Week.No.!= 14)
str(data)
summary(data)
head(data)        #show top 6 rows
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
data_east
east_week <- as.matrix(table(data_east$Week.No.)) #get the number of DOs completed by week #
east_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
east_forecasts <- round(stats::filter(east_week[,1],weights,method="convolution",sides=1,circular=FALSE))
east_forecasts <- na.omit(east_forecasts)
class(east_forecasts)
forecasts <- as.numeric(east_forecasts)
forecasts
#plotting graph
actualsnew <- tail(east_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("East")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(east_week[11:13])
pred_next
East <- data.frame("East", WAPE, pred_next)
names(East) <- c("Zone","WAPE", "Prediction")
East
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
data_east
east_week <- as.matrix(table(data_east$Week.No.)) #get the number of DOs completed by week #
east_week
#Forecast with moving average 2 periods
weights <- rep(1/2,2)
weights
east_forecasts <- round(stats::filter(east_week[,1],weights,method="convolution",sides=1,circular=FALSE))
east_forecasts <- na.omit(east_forecasts)
class(east_forecasts)
forecasts <- as.numeric(east_forecasts)
forecasts
#plotting graph
actualsnew <- tail(east_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("East")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(east_week[12:13])
pred_next
East <- data.frame("East", WAPE, pred_next)
names(East) <- c("Zone","WAPE", "Prediction")
East
#install.packages("ggplot2")
library("ggplot2")
rm(list=ls()) #remove all var in the list
data <- read.csv("Final_Combined.csv")
data <- subset(data,data$Week.No.!= 14)
str(data)
summary(data)
head(data)        #show top 6 rows
table(data$Zone)
ggplot(data,aes(x=Zone))+geom_bar()
data_central <- subset(data, data$Zone == 'CENTRAL') #get data frame of only central zone
data_central
central_week <- as.matrix(table(data_central$Week.No.)) #get the number of DOs completed by week #
central_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
central_forecasts <- round(stats::filter(central_week[,1],weights,method="convolution",sides=1,circular=FALSE)) #use stats:: because dpylr has a filter function that is different
central_forecasts <- na.omit(central_forecasts)
class(central_forecasts)
forecasts <- as.numeric(central_forecasts)
forecasts
#plotting graph
actualsnew <- tail(central_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("Central")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
dim(central_week)
central_week[11:13]
pred_next <- mean(central_week[11:13])
pred_next
#form into dataframe
Central <- data.frame("Central", WAPE, pred_next)
names(Central) <- c("Zone","WAPE", "Prediction")
Central
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
data_east
east_week <- as.matrix(table(data_east$Week.No.)) #get the number of DOs completed by week #
east_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
east_forecasts <- round(stats::filter(east_week[,1],weights,method="convolution",sides=1,circular=FALSE))
east_forecasts <- na.omit(east_forecasts)
class(east_forecasts)
forecasts <- as.numeric(east_forecasts)
forecasts
#plotting graph
actualsnew <- tail(east_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("East")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(east_week[11:13])
pred_next
East <- data.frame("East", WAPE, pred_next)
names(East) <- c("Zone","WAPE", "Prediction")
East
data_north <- subset(data, data$Zone == 'NORTH' | data$Zone == 'NORTH-EAST') #get data frame of only central zone
data_north
north_week <- as.matrix(table(data_north$Week.No.)) #get the number of DOs completed by week #
north_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
north_forecasts <- round(stats::filter(north_week[,1],weights,method="convolution",sides=1,circular=FALSE))
north_forecasts <- na.omit(north_forecasts)
class(north_forecasts)
forecasts <- as.numeric(north_forecasts)
forecasts
#plotting graph
actualsnew <- tail(north_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("North")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(north_week[11:13])
pred_next
North <- data.frame("North", WAPE, pred_next)
names(North) <- c("Zone","WAPE", "Prediction")
North
data_south <- subset(data, data$Zone == 'SOUTH' | data$Zone == 'SOUTH-WEST') #get data frame of only central zone
data_south
south_week <- as.matrix(table(data_south$Week.No.)) #get the number of DOs completed by week #
south_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
south_forecasts <- round(stats::filter(south_week[,1],weights,method="convolution",sides=1,circular=FALSE))
south_forecasts <- na.omit(south_forecasts)
class(south_forecasts)
forecasts <- as.numeric(south_forecasts)
forecasts
#plotting graph
actualsnew <- tail(south_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("South")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
dim(south_week) #no deliveries in Jul and Aug
pred_next <- 0
pred_next
South <- data.frame("South", WAPE, pred_next)
names(South) <- c("Zone","WAPE", "Prediction")
South
data_west <- subset(data, data$Zone == 'WEST') #get data frame of only central zone
data_west
west_week <- as.matrix(table(data_west$Week.No.)) #get the number of DOs completed by week #
west_week
#Forecast with moving average 2 periods
weights <- rep(1/3,3)
weights
west_forecasts <- round(stats::filter(west_week[,1],weights,method="convolution",sides=1,circular=FALSE))
west_forecasts <- na.omit(west_forecasts)
class(west_forecasts)
forecasts <- as.numeric(west_forecasts)
forecasts
#plotting graph
actualsnew <- tail(west_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("West")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(west_week[11:13])
pred_next
West <- data.frame("West", WAPE, pred_next)
names(West) <- c("Zone","WAPE", "Prediction")
West
library("dplyr")
combined <- bind_rows(Central,East, North, South, West)
combined
data_east <- subset(data, data$Zone == 'EAST') #get data frame of only central zone
data_east
east_week <- as.matrix(table(data_east$Week.No.)) #get the number of DOs completed by week #
east_week
#Forecast with moving average 2 periods
weights <- rep(1/2,2)
weights
east_forecasts <- round(stats::filter(east_week[,1],weights,method="convolution",sides=1,circular=FALSE))
east_forecasts <- na.omit(east_forecasts)
class(east_forecasts)
forecasts <- as.numeric(east_forecasts)
forecasts
#plotting graph
actualsnew <- tail(east_week[,1], length(forecasts))
plot(actualsnew)
lines(actualsnew)
points(forecasts,col=c("red"))
title("East")
#Calculate WAPE
errors <- forecasts-actualsnew
abserrors <- abs(errors)
totalerror <- sum(abserrors)
totalactual <- sum(actualsnew)
if (totalactual>0) {
relativeabsoluteerror <- totalerror/totalactual
} else {
relativeabsoluteerror <- 0
}
WAPE <- relativeabsoluteerror*100
WAPE
#predict next value
pred_next <- mean(east_week[12:13])
pred_next
East <- data.frame("East", WAPE, pred_next)
names(East) <- c("Zone","WAPE", "Prediction")
East
library(dplyr)
library(ggplot2)
library(caTools)
library(corrgram)
setwd("C:\\Users\\Yong Sheng\\Desktop\\UROP\\SplitVRPHUROP\\Normalized Data")
df <- read.csv("dataset_3.csv")
sampleSplit <- sample.split(Y=df$highest_split_distance_10x, SplitRatio=0.7)
trainSet <- subset(x=df, sampleSplit==TRUE)
testSet <- subset(x=df, sampleSplit==FALSE)
model <- lm(highest_split_distance_10x~ avg_num_of_neighbors, data=trainSet)
summary(model)
preds <- predict(model, testSet)
model <- lm(highest_split_distance_10x~ 0+lowest_demand +	original_objective + number_of_nodes, data=trainSet)
summary(model)
library(dplyr)
library(ggplot2)
library(caTools)
library(corrgram)
setwd("C:\\Users\\Yong Sheng\\Desktop\\UROP\\SplitVRPHUROP\\Normalized Data")
df <- read.csv("dataset_3.csv")
sampleSplit <- sample.split(Y=df$highest_split_distance_10x, SplitRatio=0.7)
trainSet <- subset(x=df, sampleSplit==TRUE)
testSet <- subset(x=df, sampleSplit==FALSE)
model <- lm(highest_split_distance_10x~ avg_num_of_neighbors, data=trainSet)
summary(model)
preds <- predict(model, testSet)
model <- lm(highest_split_distance_10x~ 0+lowest_demand +	original_objective + number_of_nodes + avg_num_of_neighbors, data=trainSet)
summary(model)
